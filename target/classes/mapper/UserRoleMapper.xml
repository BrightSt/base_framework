<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xqls.common.dao.UserRoleMapper">
	<resultMap id="BaseResultMap" type="com.xqls.common.entity.UserRole">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="role_id" jdbcType="INTEGER" property="roleId" />
		<result column="user_id" jdbcType="INTEGER" property="userId" />
		<result column="create_id" jdbcType="DECIMAL" property="createId" />
		<result column="create_date_time" jdbcType="TIMESTAMP"
			property="createDateTime" />
	</resultMap>
	<sql id="Base_Column_List">
		id, role_id, user_id, create_id, create_date_time
	</sql>
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from user_role
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		user_role
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="com.xqls.common.entity.UserRole">
		insert into user_role (id,
		role_id, user_id,
		create_id, create_date_time)
		values
		(#{id,jdbcType=INTEGER}, #{roleId,jdbcType=INTEGER},
		#{userId,jdbcType=INTEGER},
		#{createId,jdbcType=DECIMAL},
		#{createDateTime,jdbcType=TIMESTAMP})
	</insert>
	<insert id="insertSelective" parameterType="com.xqls.common.entity.UserRole">
		insert into user_role
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="roleId != null">
				role_id,
			</if>
			<if test="userId != null">
				user_id,
			</if>
			<if test="createId != null">
				create_id,
			</if>
			<if test="createDateTime != null">
				create_date_time,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="roleId != null">
				#{roleId,jdbcType=INTEGER},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=INTEGER},
			</if>
			<if test="createId != null">
				#{createId,jdbcType=DECIMAL},
			</if>
			<if test="createDateTime != null">
				#{createDateTime,jdbcType=TIMESTAMP},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.xqls.common.entity.UserRole">
		update user_role
		<set>
			<if test="roleId != null">
				role_id = #{roleId,jdbcType=INTEGER},
			</if>
			<if test="userId != null">
				user_id = #{userId,jdbcType=INTEGER},
			</if>
			<if test="createId != null">
				create_id = #{createId,jdbcType=DECIMAL},
			</if>
			<if test="createDateTime != null">
				create_date_time = #{createDateTime,jdbcType=TIMESTAMP},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.xqls.common.entity.UserRole">
		update user_role
		set role_id = #{roleId,jdbcType=INTEGER},
		user_id =
		#{userId,jdbcType=INTEGER},
		create_id = #{createId,jdbcType=DECIMAL},
		create_date_time = #{createDateTime,jdbcType=TIMESTAMP}
		where id =
		#{id,jdbcType=INTEGER}
	</update>

	<select id="lsit" parameterType="com.xqls.common.entity.UserRole">
		select *
		from user_role ur
		left join user_info ui on ur.user_id = ui.id
		left join role_info ri on ur.role_id = ri.id
		where 1=1
		<if test="userId!=null and userId !=0">
			and user_id = #{userId}
		</if>
		order by create_date_time desc
	</select>

	<delete id="deleteByUserId" parameterType="com.xqls.common.entity.UserRole">
		delete from
		user_role
		where user_id = #{userId}
	</delete>

	<insert id="insertRole" parameterType="com.xqls.common.dto.UserRoleModel">
		insert into user_role(role_id,user_id,create_date_time)
		values
		<foreach collection='roleIds' item="roleid" separator=",">
			(#{roleid},#{userId},now())
		</foreach>
	</insert>

	<select id="selectRoleList" resultType="com.xqls.common.dto.TreeData">
		select id,name as text
		from role_info
	</select>

	<select id="selectRoleByUser" parameterType="java.lang.Integer"
		resultType="com.xqls.common.dto.TreeData">
		select * from user_role where user_id = #{userid}
	</select>
	
	
</mapper>